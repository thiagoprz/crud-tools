\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename laravelcrudtools.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 4.3.2.@*
@end ifinfo
@settitle Laravel Crud Tools
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Miscellaneous
@direntry
* laravelcrudtools: (laravelcrudtools.info). One line description of project
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
Laravel Crud Tools 0.0.61, Jan 20, 2023

Thiago Przyczynski

Copyright @copyright{} 2021, Thiago Przyczynski
@end quotation

@end copying

@titlepage
@title Laravel Crud Tools
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top Laravel Crud Tools
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{0}
@c Laravel Crud Tools documentation master file, created by
@c sphinx-quickstart on Tue Sep  7 14:02:01 2021.
@c You can adapt this file completely to your liking, but it should at least
@c contain the root `toctree` directive.

Easy to use Laravel CRUD package with Controller, Model and Log system
built in.

@menu
* Table of contents:: 
* Installation:: 
* Usage:: 
* CRUD Generators:: 
* Enabling Logs:: 
* Support:: 
* Indices and tables:: 

@end menu

@node Table of contents,Installation,Top,Top
@anchor{index laravel-crud-tools}@anchor{1}@anchor{index table-of-contents}@anchor{2}
@chapter Table of contents



@itemize -

@item 
@ref{3,,Installation}

@item 
@ref{4,,Usage}

@item 
@ref{5,,CRUD Controller}

@item 
@ref{6,,CRUD Model}

@item 
@ref{7,,CRUD Generators}

@item 
@ref{8,,Controller Generator}

@item 
@ref{9,,Model Generator}

@item 
@ref{a,,Enabling Logs}

@item 
@ref{b,,Support}
@end itemize

@node Installation,Usage,Table of contents,Top
@anchor{index installation}@anchor{3}
@chapter Installation


Install through composer using:
@code{composer install thiagoprz\crud-tools}

If you don’t have package auto discovery enabled add
CrudToolsServiceProvider to your @code{config/app.php}:

@example
...
'providers' => [
    ...
    \Thiagoprz\CrudTools\CrudToolsServiceProvider::class,
],
...
@end example

Publish Crud Tools service provider to allow stubs customization:

@code{php artisan vendor:publish --provider="Thiagoprz\CrudTools\CrudToolsServiceProvider"}

@node Usage,CRUD Generators,Installation,Top
@anchor{index usage}@anchor{4}
@chapter Usage


@menu
* CRUD Controller;: CRUD Controller. 
* CRUD Model;: CRUD Model. 

@end menu

@node CRUD Controller,CRUD Model,,Usage
@anchor{index crud-controller}@anchor{5}
@section CRUD Controller:


A CRUD Controller can be achieve by just creating a standard controller
class using ControllerCrud trait.

The next step is to create a folder inside @code{resources/views} with the
desired namespace or on root folder if the controller won’t be using a
specific namespace (admin on the example).

@example
<?php

namespace App\Http\Controllers\Admin;

use App\Models\User;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Thiagoprz\CrudTools\Http\Controllers\ControllerCrud;

class UserController extends Controller
@{
    use ControllerCrud;
    public $modelClass = User::class;
@}
@end example

Views directory structure used by Controller CRUD based on the above
example:

Folder: > views/admin/user

Files: > create.blade.php

@quotation

edit.blade.php
@end quotation

Available vars: $model (the model being updated)

@quotation

form.blade.php
@end quotation

Available vars: $model (the model being updated - only on edit action)

@quotation

index.blade.php
@end quotation

Available vars: $items (the pagination object containing a filtered
collection of the model)

@quotation

show.blade.php
@end quotation

Available vars: $model (the model being displayed)

@node CRUD Model,,CRUD Controller,Usage
@anchor{index crud-model}@anchor{6}
@section CRUD Model:


For models you just need to add the trait ModelCrud and after that
create a static property declaring model’s validations (based on the
create, update and/or delete scenarios), default order, filtering rules,
upload file rules, define resources, and with / countable relationships.


@itemize -

@item 
Validations:

@example
<?php
...
use Thiagoprz\CrudTools\Models\ModelCrud;
class User extends Authenticatable
@{
    use ModelCrud;

/**
 * Model validations
 *
 * @@var array
 */
static $validations = [
    'create' => [
        'name' => ['required', 'string', 'max:255'],
        'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
        'password' => ['required', 'string', 'min:8', 'confirmed'],
    ],
    'update' => [
        'name' => ['required', 'string', 'max:255'],
        'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
        'password' => ['required', 'string', 'min:8', 'confirmed'],
    ],
];
...
@}
@end example

@item 
Searchable fields:
@end itemize

You can create a $searchable property that will hold fields allowed to
be searched on the static method @strong{search()} - very useful with the
ControllerCrud.

@example
<?php
...
use Thiagoprz\CrudTools\Models\ModelCrud;
class User extends Authenticatable
@{
    use ModelCrud;
    /**
     * Fields that can be searched by (static)method search()
     *
     * @@var array
     */
    static $searchable = [
        'id' => 'int',
        'name' => 'string',
        'created_at' => 'datetime',
    ];
    ...
@}
@end example


@itemize -

@item 
Range searchable fields:
@end itemize

Types available: int, string, date, datetime and decimal.

You can use input filters using “@emph{from” and “}to” suffix on date,
datetime and decimal fields:

@example
<!-- Filtering created_at usig field "from" ( where created_at >= $created_at_from ) -->
<label>Period from: </label>
<input type="date" name="created_at_from">

<!-- Filtering created_at usig field "to" ( where created_at <= $created_at_to ) -->
<label>To:</label>
<input type="date" name="created_at_to">
@end example


@multitable {xxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxx} 
@headitem

Type

@tab

Description

@tab

Suffixes: >>*<<from >>*<<to

@item

int

@tab

Integer fields, can be used to search a range of records by using “@emph{from” and “}to” suffixes

@tab

Yes

@item

decimal

@tab

Float, Double, Real or any decimal type of field. “@emph{from” and “}to” suffixes allowed

@tab

Yes

@item

string

@tab

Any string field to be search using “WHERE field LIKE ‘%SEARCH%’”

@tab

No

@item

string

@tab

Any string field to be search using “WHERE field = ‘SEARCH’”

@tab

No

@item

datetime

@tab

Datetime and Timestamp fields

@tab

Yes

@item

date

@tab

Date fields

@tab

Yes

@end multitable



@itemize -

@item 
Custom searchable field methods:
@end itemize

In addition to use standard search based on type of fields you can add
your on custom methods to customize search of specific fields. Create a
method called “@strong{searchField}” where Field is the name of the field
with only first letter upper case.

Example:

@example
<?php
...
use Thiagoprz\CrudTools\Models\ModelCrud;
class Books extends Model
@{
    ...

    /**
     * Searching only by the start of the title of the book with LIKE
     */
    public static function searchTitle($query, $title)
    @{
        $query->where('title', 'LIKE', "$title%");
    @}

@}
@end example


@itemize -

@item 
Sortable fields:
@end itemize

You can define the fields that will be used as default sorting of your
model on the index action. Also, you can pass an “order” input used by
the search method allowing the override the default order defined by
this variable.

@example
<?php
...
use Thiagoprz\CrudTools\Models\ModelCrud;
class Books extends Model
@{
    use ModelCrud;
    /**
     * Default order
     *
     * @@var array
     */
    static $search_order = [
        'title' => 'ASC',
        'updated_at' => 'DESC',
        'created_at' => 'DESC',
    ];
    ...
@}
@end example


@itemize -

@item 
Upload fields:
@end itemize

You can create a fileUploads method to define which and where your
uploadable fields will store the files:

@example
<?php
...
use Thiagoprz\CrudTools\Models\ModelCrud;
class User extends Authenticatable
@{
    use ModelCrud;
    ...
    /**
     * @@param Campaign $model
     * @@return array
     */
    public static function fileUploads(Campaign $model)
    @{
        return [
            'FIELD_NAME' => [
                'path' => 'FOLDER', // Mandatory
                'name' => 'FILE_NAME', // (OPTIONAL)if not provided will be the file original name
            ],
        ];
    @}
    ...
@}
@end example

@node CRUD Generators,Enabling Logs,Usage,Top
@anchor{index crud-generators}@anchor{7}
@chapter CRUD Generators


@menu
* Controller Generator;: Controller Generator. 
* Model Generator;: Model Generator. 

@end menu

@node Controller Generator,Model Generator,,CRUD Generators
@anchor{index controller-generator}@anchor{8}
@section Controller Generator:


You can create a standard Controller to work with a model by using the
following command:

@code{php artisan make:crud-controller NAMESPACE1/NAMEController NAMESPACE2/Model}

@quotation

NAMESPACE1: Controller’s namespace

NAMEController: is the name of the controller

NAMESPACE2: Model’s namespace

Model: Name of the model
@end quotation

@node Model Generator,,Controller Generator,CRUD Generators
@anchor{index model-generator}@anchor{9}
@section Model Generator:


To easily create a model with all Crud Tools enabled use:

@example
php artisan make:crud-model NAMESPACE/Model

NAMESPACE: Model's namespace Model: Name of the model
@end example


@itemize -

@item 
Available options

@item 
@strong{–fillable}: comma separated fields for fillable attributes

@item 
@strong{–searchable}: comma separated fields for searchable attributes
(based on search() method)

@item 
@strong{–primaryKey}: field or comma separated fields that are the
table’s primary key

@item 
@strong{–softDeletes}: if passed enables SoftDeletes trait on class

@item 
@strong{–uploads}: if passed adds fileUploads() method on class

@item 
@strong{–logable}: adds Logable trait on model
@end itemize

@node Enabling Logs,Support,CRUD Generators,Top
@anchor{index enabling-logs}@anchor{a}
@chapter Enabling Logs


To enable automatic logs on your models you need to publish Spatie
Activity Logger migrations:

@code{php artisan vendor:publish --provider="Spatie\Activitylog\ActivitylogServiceProvider" --tag="migrations"}

Run migrations:

@code{php artisan migrate}

For more information you can read Spatie Activity Log
Documentations@footnote{https://github.com/spatie/laravel-activitylog}.

@node Support,Indices and tables,Enabling Logs,Top
@anchor{index support}@anchor{b}
@chapter Support


@menu
* Issues:: 
* Supported By Jetbrains:: 
* Buy me a Coffee:: 

@end menu

@node Issues,Supported By Jetbrains,,Support
@anchor{index issues}@anchor{c}
@section Issues


Please feel free to indicate any issues on this packages, it will help a
lot. I will address it as soon as possible.

@node Supported By Jetbrains,Buy me a Coffee,Issues,Support
@anchor{index supported-by-jetbrains}@anchor{d}
@section Supported By Jetbrains


This project is being developed with the help of
Jetbrains@footnote{https://www.jetbrains.com/?from=LaravelCrudTools} through
its project to support Open Source software.


@float Figure

@image{laravelcrudtools-figures/../../support/jetbrains,,,Supported by Jetbrains,svg}

@end float


@node Buy me a Coffee,,Supported By Jetbrains,Support
@anchor{index buy-me-a-coffee}@anchor{e}
@section Buy me a Coffee


 

@node Indices and tables,,Support,Top
@anchor{index indices-and-tables}@anchor{f}
@unnumbered Indices and tables



@itemize *

@item 
search

@item 
genindex
@end itemize

@c %**end of body
@bye
